services:
  # Aplicação Django para produção
  django-app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: smart-core-assistant-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DJANGO_DEBUG=False
      - POSTGRES_DB=smart_core_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_HOST=postgres-django
      - POSTGRES_PORT=5432
      # Variáveis dinâmicas serão configuradas pelo start_services
      # SECRET_KEY_DJANGO, OPENAI_API_KEY, GROQ_API_KEY, etc. vêm do Firebase Remote Config
    volumes:
      # Persistent data only
      - ./src/smart_core_assistant_painel/app/ui/db:/app/src/smart_core_assistant_painel/app/ui/db
      - ./src/smart_core_assistant_painel/app/ui/media:/app/src/smart_core_assistant_painel/app/ui/media
    depends_on:
      - postgres-django
      - evolution-api
    networks:
      - smart-core-network

  # Django Q Cluster para produção
  django-qcluster:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: smart-core-qcluster-prod
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DJANGO_DEBUG=False
      - POSTGRES_DB=smart_core_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_HOST=postgres-django
      - POSTGRES_PORT=5432
      # Variáveis dinâmicas serão configuradas pelo start_services
      # SECRET_KEY_DJANGO, OPENAI_API_KEY, GROQ_API_KEY, etc. vêm do Firebase Remote Config
    volumes:
      - ./src/smart_core_assistant_painel/app/ui/db:/app/src/smart_core_assistant_painel/app/ui/db
      - ./src/smart_core_assistant_painel/app/ui/media:/app/src/smart_core_assistant_painel/app/ui/media
    depends_on:
      - django-app
    networks:
      - smart-core-network
    entrypoint: ["/usr/local/bin/docker-entrypoint-qcluster.sh"]
    command: ["uv", "run", "python", "src/smart_core_assistant_painel/app/ui/manage.py", "qcluster"]

  # PostgreSQL para Django
  postgres-django:
    image: postgres:15-alpine
    container_name: postgres-django-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=smart_core_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    volumes:
      - postgres_django_data:/var/lib/postgresql/data
    networks:
      - smart-core-network

  # PostgreSQL para Evolution API
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=evolution
      - POSTGRES_USER=evolution
      - POSTGRES_PASSWORD=evolution123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - smart-core-network

  # Evolution API para produção
  evolution-api:
    image: atendai/evolution-api:v2.1.1
    container_name: evolution-api-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Configuração conforme documentação oficial v2
      - AUTHENTICATION_API_KEY=evolution-api-key-prod
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://evolution:evolution123@postgres:5432/evolution?schema=public
      - DATABASE_CONNECTION_CLIENT_NAME=evolution_exchange
    volumes:
      - evolution_instances:/evolution/instances
    depends_on:
      - postgres
    networks:
      - smart-core-network

volumes:
  evolution_instances:
    driver: local
  postgres_data:
    driver: local
  postgres_django_data:
    driver: local

networks:
  smart-core-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16