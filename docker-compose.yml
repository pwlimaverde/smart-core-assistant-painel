services:
  # Aplicação Django
  django-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart-core-assistant
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - SECRET_KEY_DJANGO=${SECRET_KEY_DJANGO}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EVOLUTION_API_URL=http://evolution-api:8080
    volumes:
      - ./src/smart_core_assistant_painel/app/ui/db:/app/src/smart_core_assistant_painel/app/ui/db
      - ./src/smart_core_assistant_painel/app/ui/media:/app/src/smart_core_assistant_painel/app/ui/media
      - django_static:/app/src/smart_core_assistant_painel/app/ui/staticfiles
    depends_on:
      - redis
      - evolution-api
    networks:
      - smart-core-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Django Q Cluster para processamento assíncrono
  django-qcluster:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart-core-qcluster
    restart: unless-stopped
    command: ["python", "src/smart_core_assistant_painel/main.py", "qcluster"]
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - SECRET_KEY_DJANGO=${SECRET_KEY_DJANGO}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./src/smart_core_assistant_painel/app/ui/db:/app/src/smart_core_assistant_painel/app/ui/db
      - ./src/smart_core_assistant_painel/app/ui/media:/app/src/smart_core_assistant_painel/app/ui/media
    depends_on:
      - redis
      - django-app
    networks:
      - smart-core-network

  # Evolution API para WhatsApp
  evolution-api:
    image: atendai/evolution-api:v2.1.1
    container_name: evolution-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Configurações básicas
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - SERVER_URL=http://localhost:8080
      
      # Configurações de autenticação
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY:-evolution-api-key}
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      
      # Configurações de banco de dados
      - DATABASE_ENABLED=true
      - DATABASE_CONNECTION_URI=mongodb://mongodb:27017/evolution
      - DATABASE_CONNECTION_DB_PREFIX_NAME=evolution
      
      # Configurações de Redis
      - REDIS_ENABLED=true
      - REDIS_URI=redis://redis:6379
      - REDIS_PREFIX_KEY=evolution
      
      # Configurações de webhook
      - WEBHOOK_GLOBAL_URL=http://django-app:8000/oraculo/webhook_whatsapp/
      - WEBHOOK_GLOBAL_ENABLED=true
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
      
      # Configurações de logs
      - LOG_LEVEL=ERROR
      - LOG_COLOR=true
      - LOG_BAILEYS=error
      
      # Configurações de QR Code
      - QRCODE_LIMIT=30
      - QRCODE_COLOR=#198754
      
      # Configurações de instância
      - CONFIG_SESSION_PHONE_CLIENT=Evolution API
      - CONFIG_SESSION_PHONE_NAME=Chrome
      
      # Configurações de segurança
      - CORS_ORIGIN=*
      - CORS_METHODS=GET,POST,PUT,DELETE
      - CORS_CREDENTIALS=true
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    depends_on:
      - mongodb
      - redis
    networks:
      - smart-core-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB para Evolution API
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-admin123}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - smart-core-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis para cache e filas
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - smart-core-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - django_static:/var/www/static:ro
    depends_on:
      - django-app
      - evolution-api
    networks:
      - smart-core-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  evolution_instances:
    driver: local
  evolution_store:
    driver: local
  django_static:
    driver: local

networks:
  smart-core-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16