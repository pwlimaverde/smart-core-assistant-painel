"""
Exemplo de uso da PydanticModelFactory com os JSONs fornecidos pelo usu√°rio
"""

from smart_core_assistant_painel.modules.ai_engine.features.analise_previa_mensagem.datasource.langchain_pydantic.pydantic_model_factory import (
    create_dynamic_pydantic_model, )

# JSONs exatos fornecidos pelo usu√°rio
entity_types_json = {
    "entity_types": {
        "identificacao_pessoal": {
            "cliente": "nome ou identifica√ß√£o do cliente",
            "contato": "informa√ß√µes de contato geral",
            "email": "endere√ßo de email",
            "telefone": "n√∫mero de telefone"
        },
        "produtos_servicos": {
            "tipo_produto": "categoria ou tipo de produto",
            "produto": "nome espec√≠fico do produto",
            "servico": "tipo de servi√ßo solicitado",
            "marca": "marca ou fabricante"
        },
        "quantidades_medidas": {
            "quantidade": "n√∫mero ou volume de itens",
            "preco": "valor monet√°rio ou or√ßamento",
            "desconto": "percentual ou valor de desconto"
        },
        "tempo_localizacao": {
            "prazo": "per√≠odo ou data limite",
            "data": "data espec√≠fica",
            "horario": "hor√°rio espec√≠fico",
            "local": "endere√ßo ou localiza√ß√£o",
            "cidade": "nome da cidade"
        },
        "caracteristicas_tecnicas": {
            "cor": "cor do produto",
            "tamanho": "dimens√µes ou tamanho",
            "material": "tipo de material",
            "modelo": "modelo espec√≠fico"
        },
        "identificadores_sistema": {
            "numero_protocolo": "n√∫mero de protocolo de atendimento",
            "id_pedido": "identificador do pedido",
            "codigo_cliente": "c√≥digo de identifica√ß√£o do cliente",
            "numero_ticket": "n√∫mero do ticket de suporte",
            "codigo_produto": "c√≥digo do produto"
        },
        "documentos_identificacao": {
            "cpf": "CPF do cliente",
            "cnpj": "CNPJ da empresa",
            "rg": "RG do cliente",
            "numero_conta": "n√∫mero da conta",
            "codigo_transacao": "c√≥digo da transa√ß√£o"
        },
        "dados_financeiros": {
            "forma_pagamento": "meio de pagamento",
            "numero_parcelas": "quantidade de parcelas",
            "vencimento": "data de vencimento",
            "valor_total": "valor total da transa√ß√£o",
            "juros": "taxa de juros"
        },
        "status_estados": {
            "status_pedido": "situa√ß√£o atual do pedido",
            "situacao_cliente": "status do cliente",
            "nivel_prioridade": "n√≠vel de prioridade do atendimento",
            "tipo_cliente": "categoria do cliente",
            "canal_origem": "canal de origem do contato"
        },
        "entrega_logistica": {
            "cep": "c√≥digo postal",
            "endereco": "endere√ßo completo",
            "transportadora": "empresa de transporte",
            "codigo_rastreamento": "c√≥digo de rastreamento"
        },
        "suporte_tecnico": {
            "versao_sistema": "vers√£o do sistema",
            "codigo_erro": "c√≥digo de erro",
            "categoria_problema": "categoria do problema",
            "departamento": "departamento respons√°vel"
        }
    }
}

intent_types_json = {
    "intent_types": {
        "comunicacao_basica": {
            "saudacao": "cumprimentos e apresenta√ß√µes",
            "despedida": "finaliza√ß√µes de conversa",
            "agradecimento": "express√µes de gratid√£o"
        },
        "busca_informacao": {
            "pergunta": "solicita√ß√µes de informa√ß√£o",
            "esclarecimento": "pedidos de clarifica√ß√£o",
            "consulta": "verifica√ß√µes de status ou disponibilidade"
        },
        "acoes_comerciais": {
            "solicitacao_servico": "pedidos de servi√ßos ou produtos",
            "cotacao": "solicita√ß√µes de or√ßamento ou pre√ßo",
            "pedido": "ordens de compra ou contrata√ß√£o",
            "cancelamento": "solicita√ß√µes de cancelamento"
        },
        "feedback_suporte": {
            "reclamacao": "queixas ou problemas",
            "elogio": "coment√°rios positivos ou satisfa√ß√£o",
            "sugestao": "propostas de melhoria",
            "relato_problema": "descri√ß√£o de dificuldades t√©cnicas"
        },
        "confirmacoes_validacoes": {
            "confirmacao": "confirma√ß√µes de a√ß√µes ou informa√ß√µes",
            "negacao": "recusas ou negativas",
            "aceitacao": "concord√¢ncias ou aprova√ß√µes"
        },
        "informacoes_fornecidas": {
            "apresentacao": "identifica√ß√£o pessoal ou empresarial",
            "informacao": "dados ou detalhes fornecidos",
            "instrucao": "orienta√ß√µes ou direcionamentos"
        },
        "urgencia_priorizacao": {
            "urgente": "solicita√ß√µes com alta prioridade",
            "agendamento": "marca√ß√£o de compromissos ou reuni√µes",
            "acompanhamento": "verifica√ß√£o de andamento de processos"
        },
        "controle_atendimento": {
            "transferir_humano": "solicita√ß√µes para falar com atendente",
            "escalar_supervisor": "pedidos para falar com supervisor",
            "pausar_atendimento": "pausar o atendimento temporariamente",
            "finalizar_atendimento": "encerrar o atendimento"
        },
        "autenticacao_seguranca": {
            "login": "tentativas de acesso ao sistema",
            "validar_identidade": "verifica√ß√µes de identidade",
            "reset_senha": "solicita√ß√µes de redefini√ß√£o de senha",
            "recuperar_acesso": "recupera√ß√£o de acesso ao sistema"
        },
        "gerenciamento_dados": {
            "atualizar_dados": "atualiza√ß√£o de informa√ß√µes",
            "excluir_dados": "exclus√£o de informa√ß√µes",
            "consultar_historico": "consulta ao hist√≥rico",
            "exportar_dados": "exporta√ß√£o de dados"
        }
    }
}


def demonstrar_uso() -> None:
    """
    Demonstra o uso da factory com os JSONs do usu√°rio
    """
    print("=== Demonstra√ß√£o da PydanticModelFactory ===\n")

    # Criar o modelo din√¢mico
    PydanticModel = create_dynamic_pydantic_model(
        intent_types_json=intent_types_json,
        entity_types_json=entity_types_json
    )

    print("‚úÖ Modelo PydanticModel criado dinamicamente!")
    print(f"Nome da classe: {PydanticModel.__name__}")

    # Mostrar um trecho da documenta√ß√£o gerada
    if PydanticModel.__doc__:
        doc_lines = PydanticModel.__doc__.split('\n')
        print("\nüìö Documenta√ß√£o gerada (primeiras 20 linhas):")
        for i, line in enumerate(doc_lines[:20]):
            print(f"  {line}")

        print("  [... documenta√ß√£o continua ...]")

    # Exemplo de uso pr√°tico
    print("\nüîß Exemplo de uso:")
    exemplo_mensagem = PydanticModel(
        intent=[
            {"type": "saudacao", "value": "Ol√°, tudo bem?"},
            {"type": "cotacao", "value": "gostaria de uma cota√ß√£o"},
            {"type": "pergunta", "value": "voc√™s produzem cones para crepe?"}
        ],
        entities=[
            {"type": "cliente", "value": "Paulo"},
            {"type": "produto", "value": "cones para crepe"},
            {"type": "servico", "value": "cota√ß√£o"}
        ]
    )

    print(f"Inst√¢ncia criada com sucesso: {type(exemplo_mensagem).__name__}")

    print("‚ú® Demonstra√ß√£o conclu√≠da! A factory funciona perfeitamente.")
    print("üéØ Agora voc√™ pode usar os JSONs de configura√ß√£o para gerar")
    print("   dinamicamente a classe PydanticModel com tipos e documenta√ß√£o")
    print("   personalizados para cada contexto de uso.")


if __name__ == "__main__":
    demonstrar_uso()
