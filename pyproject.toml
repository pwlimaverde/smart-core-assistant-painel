[project]
name = "smart-core-assistant-painel"
version = "0.8.3"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "pwlimaverde", email = "pwlimaverde@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "aiohappyeyeballs==2.6.1",
    "aiohttp==3.12.2",
    "aiosignal==1.3.2",
    "annotated-types==0.7.0",
    "anyio==4.9.0",
    "arrow==1.3.0",
    "asgiref==3.8.1",
    "attrs==25.3.0",
    "beautifulsoup4==4.13.4",
    "blessed==1.21.0",
    "certifi==2025.4.26",
    "charset-normalizer==3.4.2",
    "dataclasses-json==0.6.7",
    "distro==1.9.0",
    "django==5.2.5",
    "django-picklefield==3.3",
    "django-q2==1.8.0",
    "django-role-permissions==3.2.0",
    "docx2txt>=0.9",
    "pgvector>=0.3.0",
    "firebase-admin>=6.9.0",
    "frozenlist==1.6.0",
    "groq>=0.26.0",
    "h11==0.16.0",
    "httpcore==1.0.9",
    "httpx==0.28.1",
    "httpx-sse==0.4.0",
    "idna==3.10",
    "jiter==0.10.0",
    "jsonpatch==1.33",
    "jsonpointer==3.0.0",
    "langchain==0.3.25",
    "langchain-community==0.3.24",
    "langchain-core==0.3.62",
    "langchain-groq>=0.3.2",
    "langchain-ollama>=0.3.3",
    "langchain-openai==0.3.18",
    "langchain-text-splitters==0.3.8",
    "langchain-xai==0.2.4",
    "langsmith==0.3.42",
    "markdown>=3.8",
    "marshmallow==3.26.1",
    "multidict==6.4.4",
    "mypy-extensions==1.1.0",
    "networkx>=3.5",
    "openai==1.82.0",
    "openpyxl>=3.1.5",
    "orjson==3.10.18",
    "packaging==24.2",
    "propcache==0.3.1",
    "psycopg[binary]==3.2.3",
    "py-return-success-or-error==0.6.1",
    "pydantic==2.11.5",
    "pydantic-core==2.33.2",
    "pydantic-settings==2.9.1",
    "pypdf==5.5.0",
    "python-dateutil==2.9.0.post0",
    "python-decouple==3.8",
    "python-dotenv[cli]==1.1.0",
    "pyyaml==6.0.2",
    "redis>=4.5.0",
    "django-redis==5.4.0",
    "regex==2024.11.6",
    "requests==2.32.3",
    "requests-toolbelt==1.0.0",
    "setuptools==80.9.0",
    "six==1.17.0",
    "sniffio==1.3.1",
    "soupsieve==2.7",
    "sqlalchemy==2.0.41",
    "sqlparse==0.5.3",
    "tenacity==9.1.2",
    "tiktoken==0.9.0",
    "tqdm==4.67.1",
    "typing-extensions==4.13.2",
    "typing-inspect==0.9.0",
    "typing-inspection==0.4.1",
    "tzlocal==5.3.1",
    "unstructured>=0.17.2",
    "urllib3==2.4.0",
    "wcwidth==0.2.13",
    "xlrd>=2.0.1",
    "yarl==1.20.0",
    "zstandard==0.23.0",
    "huggingface-hub>=0.24.0",
    "langchain-huggingface>=0.2.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "loguru>=0.7.3",
    "pyright>=1.1.380",
    "pytest>=8.4.0",
    "pytest-cov>=6.1.1",
    "pytest-django>=4.9.0",
    "rich>=14.0.0",
    "ruff>=0.11.13",
    "taskipy>=1.14.1",
    "types-beautifulsoup4>=4.12.0.20250516",
    "types-requests>=2.32.0.20250602",
    "django-types>=0.22.0",
    "django-stubs-ext>=5.2.2",
]
doc = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings>=0.29.1",
    "mkdocstrings-python>=1.16.12",
]

[tool.ruff]
line-length = 79
target-version = "py313"

[tool.ruff.lint]
extend-select = ["I"]

[tool.pyright]
# Verificação de tipos em modo estrito no CLI
typeCheckingMode = "strict"
# Incluir src e tests na análise
include = ["src", "tests"]
# Excluir migrations da análise para reduzir ruído
exclude = ["**/migrations/**"]
# Força alerta/erro quando tipos genéricos não têm parâmetros
reportMissingTypeArgument = "error"
reportMissingTypeStubs = false
strictParameterNoneValue = false
reportUnknownVariableType = "warning"  
# Reduz para warning ao invés de error
reportUnknownMemberType = "warning"
# Alinha com a versão de Python do projeto
pythonVersion = "3.13"
# Caminhos extras para resolver imports no layout em src/
extraPaths = [
    "src",
    "src/smart_core_assistant_painel",
    "src/smart_core_assistant_painel/app",
    "src/smart_core_assistant_painel/modules",
]


[tool.hatch.build.targets.wheel]
packages = ["src/smart_core_assistant_painel"]


[project.scripts]
# Servidor Django
dev = "smart_core_assistant_painel.main:main"
start-server = "smart_core_assistant_painel.main:main"


[tool.taskipy.tasks]
# Scripts de automação
base = "python scripts/new_feature_script.py --type base"
call-data = "python scripts/new_feature_script.py --type call_data"

# Servidor Django - Local
start = "python -m smart_core_assistant_painel.main runserver"
server = "python -m smart_core_assistant_painel.main runserver 0.0.0.0:8000"
cluster = "python -m smart_core_assistant_painel.main qcluster"

# Docker commands

start-docker = "docker compose up -d"
down-docker = "docker compose down"
pause-docker = "docker compose pause"
unpause-docker = "docker compose unpause"
restart-docker = "docker compose down && docker compose up -d --build"
logs-docker = "docker compose logs -f django-app"
logs-cluster-docker = "docker compose logs -f django-qcluster"

# Comandos Django úteis - Local
migrate = "python src/smart_core_assistant_painel/app/ui/manage.py migrate"
makemigrations = "python src/smart_core_assistant_painel/app/ui/manage.py makemigrations"
createsuperuser = "python src/smart_core_assistant_painel/app/ui/manage.py createsuperuser"
collectstatic = "cd src/smart_core_assistant_painel/app/ui && python manage.py collectstatic --noinput"
shell = "cd src/smart_core_assistant_painel/app/ui && python manage.py shell"
startapp = "python src/smart_core_assistant_painel/app/ui/manage.py startapp"

# Atalho: migração remota (aplica migrations no PostgreSQL remoto)
migrate-remoto = "python scripts/migrar_remoto.py"

# Django management commands (Docker)
migrate-docker = "docker compose exec django-app uv run python src/smart_core_assistant_painel/app/ui/manage.py migrate"
makemigrations-docker = "docker compose exec django-app uv run python src/smart_core_assistant_painel/app/ui/manage.py makemigrations"
collectstatic-docker = "docker compose exec django-app uv run python src/smart_core_assistant_painel/app/ui/manage.py collectstatic --noinput"
shell-docker = "docker compose exec django-app uv run python src/smart_core_assistant_painel/app/ui/manage.py shell"
startapp-docker = "docker compose exec django-app uv run python src/smart_core_assistant_painel/app/ui/manage.py startapp"
reset-db-docker = "docker compose down && docker volume rm postgres_django_data || true && docker compose up -d --build"

# Desenvolvimento e testes
test = "pytest tests/ -v --cov=src --cov-report=term-missing"
# Executa apenas os testes de apps Django dentro de src/
test-apps = "pytest src/smart_core_assistant_painel/app/ui -v --cov=src --cov-report=term-missing"
# Executa todos os testes (raiz + apps), equivalente ao Docker (sem container)
test-all = "pytest -v --cov=src --cov-report=term-missing"



test-coverage = "pytest tests/ -v --cov=src --cov-report=html"
lint = "ruff check src/"
format = "ruff format src/"
type-check = "pyright"

# Comandos combinados - Local
setup = "uv sync --dev && uv run task migrate && uv run task createsuperuser"
dev-setup = "uv sync --dev && uv run task migrate"

# Combined routines (Docker)
dev-setup-docker = "docker compose up -d --build"


# Testes (Docker)
# Executa toda a suíte de testes no container com cobertura em src e relatório no terminal
test-docker = "docker compose exec -e DJANGO_SETTINGS_MODULE=smart_core_assistant_painel.app.ui.core.settings_test django-app uv run pytest -v --cov=src --cov-report=term-missing"
# Executa testes com relatório de cobertura em HTML (artefato gerado dentro do container)
test-docker-coverage = "docker compose exec -e DJANGO_SETTINGS_MODULE=smart_core_assistant_painel.app.ui.core.settings_test django-app uv run pytest -v --cov=src --cov-report=html"
# Executa testes específicos dentro do container; passe o caminho/expressão após `uv run task test-docker-specific`
# Ex.: uv run task test-docker-specific -- src/smart_core_assistant_painel/app/ui/oraculo/tests/
# Removido $TASK_ARGS; Taskipy anexará os argumentos passados após o comando abaixo.
 test-docker-specific = "docker compose exec -e DJANGO_SETTINGS_MODULE=smart_core_assistant_painel.app.ui.core.settings_test django-app uv run pytest -v"
