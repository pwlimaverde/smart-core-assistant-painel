#!/bin/bash
set -e

# Fun√ß√£o para aguardar o banco de dados
wait_for_db() {
    echo "Aguardando conex√£o com o banco de dados..."
    while ! uv run python -c "import psycopg; psycopg.connect(host='$POSTGRES_HOST', port='$POSTGRES_PORT', user='$POSTGRES_USER', password='$POSTGRES_PASSWORD', dbname='$POSTGRES_DB')" 2>/dev/null; do
        echo "Banco de dados n√£o est√° pronto. Aguardando..."
        sleep 2
    done
    echo "Banco de dados conectado com sucesso!"
}

# Fun√ß√£o para executar inicializa√ß√£o completa
run_initialization() {
    echo "üî• Iniciando processo de inicializa√ß√£o completo para QCluster..."
    
    # Executa start_initial_loading (inicializa√ß√£o do Firebase)
    echo "üì± Executando start_initial_loading (Firebase Remote Config)..."
    uv run python -c "
from smart_core_assistant_painel.modules.initial_loading.start_initial_loading import start_initial_loading
try:
    start_initial_loading()
    print('‚úÖ start_initial_loading executado com sucesso!')
except Exception as e:
    print(f'‚ùå Erro em start_initial_loading: {e}')
    raise
"
    
    # Executa start_services (carregamento de remote config e configura√ß√£o de vari√°veis)
    echo "‚öôÔ∏è  Executando start_services (carregamento de configura√ß√µes)..."
    uv run python -c "
from smart_core_assistant_painel.modules.services.start_services import start_services
try:
    start_services()
    print('‚úÖ start_services executado com sucesso!')
except Exception as e:
    print(f'‚ùå Erro em start_services: {e}')
    raise
"
    
    echo "‚úÖ Inicializa√ß√£o completa finalizada com sucesso para QCluster!"
}

# Aguarda o banco de dados estar dispon√≠vel
wait_for_db

# Executa a inicializa√ß√£o completa (Firebase + Services)
run_initialization

# Aguarda um pouco para garantir que o Django principal j√° executou as migra√ß√µes
echo "‚è≥ Aguardando Django principal finalizar migra√ß√µes..."
sleep 10

# Executa o comando passado como argumento
echo "üöÄ Iniciando QCluster..."
exec "$@"