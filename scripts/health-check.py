#!/usr/bin/env python3
"""
Script de health check para os servi√ßos Docker.
Verifica se todos os servi√ßos est√£o funcionando corretamente.
"""

import sys
import time
import requests
import subprocess
from typing import Dict, List, Tuple
from dataclasses import dataclass


@dataclass
class ServiceCheck:
    """Configura√ß√£o de verifica√ß√£o de um servi√ßo."""
    name: str
    url: str
    expected_status: int = 200
    timeout: int = 10
    required: bool = True


class HealthChecker:
    """Classe para verificar a sa√∫de dos servi√ßos."""
    
    def __init__(self):
        self.services = [
            ServiceCheck(
                name="Django Application",
                url="http://localhost:8000/admin/login/",
                expected_status=200
            ),
            ServiceCheck(
                name="Evolution API",
                url="http://localhost:8080/manager",
                expected_status=200
            ),
            ServiceCheck(
                name="MongoDB Express",
                url="http://localhost:8081",
                expected_status=200,
                required=False
            ),
            ServiceCheck(
                name="Redis Commander",
                url="http://localhost:8082",
                expected_status=200,
                required=False
            )
        ]
    
    def check_service(self, service: ServiceCheck) -> Tuple[bool, str]:
        """Verifica um servi√ßo espec√≠fico.
        
        Args:
            service: Configura√ß√£o do servi√ßo a ser verificado
            
        Returns:
            Tupla com (sucesso, mensagem)
        """
        try:
            response = requests.get(
                service.url,
                timeout=service.timeout,
                allow_redirects=True
            )
            
            if response.status_code == service.expected_status:
                return True, f"‚úÖ {service.name}: OK"
            else:
                return False, f"‚ùå {service.name}: Status {response.status_code} (esperado {service.expected_status})"
                
        except requests.exceptions.ConnectionError:
            return False, f"‚ùå {service.name}: Conex√£o recusada"
        except requests.exceptions.Timeout:
            return False, f"‚ùå {service.name}: Timeout ({service.timeout}s)"
        except Exception as e:
            return False, f"‚ùå {service.name}: Erro - {str(e)}"
    
    def check_docker_containers(self) -> List[Tuple[bool, str]]:
        """Verifica o status dos containers Docker.
        
        Returns:
            Lista de tuplas com (sucesso, mensagem)
        """
        results = []
        
        try:
            # Verificar se Docker est√° rodando
            subprocess.run(
                ["docker", "version"],
                check=True,
                capture_output=True,
                text=True
            )
            
            # Listar containers
            result = subprocess.run(
                ["docker-compose", "ps", "--format", "json"],
                capture_output=True,
                text=True,
                check=True
            )
            
            if result.stdout.strip():
                results.append((True, "‚úÖ Docker Compose: Containers encontrados"))
                
                # Verificar containers espec√≠ficos
                expected_containers = [
                    "django-app",
                    "django-qcluster", 
                    "evolution-api",
                    "mongodb",
                    "redis"
                ]
                
                for container in expected_containers:
                    container_result = subprocess.run(
                        ["docker-compose", "ps", "-q", container],
                        capture_output=True,
                        text=True
                    )
                    
                    if container_result.stdout.strip():
                        # Verificar se est√° rodando
                        status_result = subprocess.run(
                            ["docker", "inspect", "-f", "{{.State.Status}}", container_result.stdout.strip()],
                            capture_output=True,
                            text=True
                        )
                        
                        if status_result.stdout.strip() == "running":
                            results.append((True, f"‚úÖ Container {container}: Rodando"))
                        else:
                            results.append((False, f"‚ùå Container {container}: {status_result.stdout.strip()}"))
                    else:
                        results.append((False, f"‚ùå Container {container}: N√£o encontrado"))
            else:
                results.append((False, "‚ùå Docker Compose: Nenhum container encontrado"))
                
        except subprocess.CalledProcessError as e:
            results.append((False, f"‚ùå Docker: Erro ao verificar containers - {e}"))
        except FileNotFoundError:
            results.append((False, "‚ùå Docker: Comando n√£o encontrado"))
            
        return results
    
    def run_health_check(self, verbose: bool = True) -> bool:
        """Executa verifica√ß√£o completa de sa√∫de.
        
        Args:
            verbose: Se deve imprimir detalhes
            
        Returns:
            True se todos os servi√ßos obrigat√≥rios est√£o OK
        """
        if verbose:
            print("üè• Verifica√ß√£o de Sa√∫de dos Servi√ßos")
            print("===================================\n")
        
        all_ok = True
        
        # Verificar containers Docker
        if verbose:
            print("üê≥ Verificando containers Docker...")
        
        docker_results = self.check_docker_containers()
        for success, message in docker_results:
            if verbose:
                print(f"   {message}")
            if not success:
                all_ok = False
        
        if verbose:
            print("\nüåê Verificando servi√ßos web...")
        
        # Verificar servi√ßos web
        for service in self.services:
            success, message = self.check_service(service)
            
            if verbose:
                print(f"   {message}")
            
            if not success and service.required:
                all_ok = False
        
        if verbose:
            print("\n" + "="*50)
            if all_ok:
                print("üéâ Todos os servi√ßos obrigat√≥rios est√£o funcionando!")
            else:
                print("‚ö†Ô∏è  Alguns servi√ßos apresentam problemas.")
        
        return all_ok
    
    def wait_for_services(self, max_wait: int = 300, check_interval: int = 10) -> bool:
        """Aguarda todos os servi√ßos ficarem prontos.
        
        Args:
            max_wait: Tempo m√°ximo de espera em segundos
            check_interval: Intervalo entre verifica√ß√µes em segundos
            
        Returns:
            True se todos os servi√ßos ficaram prontos
        """
        print(f"‚è≥ Aguardando servi√ßos ficarem prontos (m√°ximo {max_wait}s)...")
        
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            if self.run_health_check(verbose=False):
                elapsed = int(time.time() - start_time)
                print(f"‚úÖ Todos os servi√ßos prontos em {elapsed}s!")
                return True
            
            print(f"‚è≥ Aguardando... ({int(time.time() - start_time)}s)")
            time.sleep(check_interval)
        
        print(f"‚ùå Timeout: Servi√ßos n√£o ficaram prontos em {max_wait}s")
        return False


def main():
    """Fun√ß√£o principal."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Health check para servi√ßos Docker"
    )
    parser.add_argument(
        "--wait",
        action="store_true",
        help="Aguarda servi√ßos ficarem prontos"
    )
    parser.add_argument(
        "--max-wait",
        type=int,
        default=300,
        help="Tempo m√°ximo de espera em segundos (padr√£o: 300)"
    )
    parser.add_argument(
        "--quiet",
        action="store_true",
        help="Modo silencioso (apenas c√≥digo de sa√≠da)"
    )
    
    args = parser.parse_args()
    
    checker = HealthChecker()
    
    if args.wait:
        success = checker.wait_for_services(max_wait=args.max_wait)
    else:
        success = checker.run_health_check(verbose=not args.quiet)
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()