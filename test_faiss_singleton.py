#!/usr/bin/env python
"""
Script de teste para verificar o comportamento singleton do FaissVetorStorage
e a sincroniza√ß√£o entre inst√¢ncias.
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio src ao path para importar os m√≥dulos
sys.path.insert(0, str(Path(__file__).parent / "src"))


def test_faiss_singleton():
    """Testa o comportamento singleton do FaissVetorStorage."""
    print("=== Teste do Singleton FaissVetorStorage ===")

    try:
        from smart_core_assistant_painel.modules.services.features.vetor_storage.datasource.faiss_storage.faiss_vetor_storage import (
            FaissVetorStorage, )

        # Cria duas inst√¢ncias
        storage1 = FaissVetorStorage()
        storage2 = FaissVetorStorage()

        print(f"Storage1 ID: {id(storage1)}")
        print(f"Storage2 ID: {id(storage2)}")
        print(f"S√£o a mesma inst√¢ncia: {storage1 is storage2}")

        return storage1 is storage2

    except Exception as e:
        print(f"‚ùå Erro no teste singleton: {e}")
        return False


def test_servicehub_integration():
    """Testa a integra√ß√£o com ServiceHub."""
    print("\n=== Teste de Integra√ß√£o ServiceHub ===")

    try:
        from smart_core_assistant_painel.modules.services.features.service_hub import (
            SERVICEHUB, )

        # Limpa o vetor_storage para for√ßar auto-configura√ß√£o
        SERVICEHUB._vetor_storage = None

        # Acessa duas vezes para verificar se mant√©m a mesma inst√¢ncia
        storage1 = SERVICEHUB.vetor_storage
        storage2 = SERVICEHUB.vetor_storage

        print(f"Storage1 ID: {id(storage1)}")
        print(f"Storage2 ID: {id(storage2)}")
        print(f"S√£o a mesma inst√¢ncia: {storage1 is storage2}")
        print(f"Tipo: {type(storage1).__name__}")

        return storage1 is storage2

    except Exception as e:
        print(f"‚ùå Erro no teste de integra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_multiple_processes_simulation():
    """Simula m√∫ltiplos processos criando v√°rias inst√¢ncias."""
    print("\n=== Teste de Simula√ß√£o de M√∫ltiplos Processos ===")

    try:
        from smart_core_assistant_painel.modules.services.features.service_hub import (
            ServiceHub, )

        instances = []
        hub_instances = []

        # Simula v√°rios "processos" criando m√∫ltiplas inst√¢ncias
        for i in range(5):
            # Cria novo ServiceHub (simula novo processo)
            hub = ServiceHub()
            hub._vetor_storage = None  # For√ßa reconfigura√ß√£o

            # Obt√©m VetorStorage
            storage = hub.vetor_storage

            instances.append(storage)
            hub_instances.append(hub)

            print(
                f"Processo {i + 1} - Hub ID: {id(hub)}, Storage ID: {id(storage)}")

        # Verifica se todos os ServiceHub s√£o a mesma inst√¢ncia
        hub_same = all(hub is hub_instances[0] for hub in hub_instances[1:])

        # Verifica se todos os Storage s√£o a mesma inst√¢ncia
        storage_same = all(storage is instances[0]
                           for storage in instances[1:])

        print(f"\nTodos os ServiceHub s√£o iguais: {hub_same}")
        print(f"Todos os VetorStorage s√£o iguais: {storage_same}")

        return hub_same and storage_same

    except Exception as e:
        print(f"‚ùå Erro no teste de m√∫ltiplos processos: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("Iniciando testes de Singleton e Sincroniza√ß√£o...\n")

    try:
        # Executa os testes
        test1 = test_faiss_singleton()
        test2 = test_servicehub_integration()
        test3 = test_multiple_processes_simulation()

        print("\n=== Resultados dos Testes ===")
        print(
            f"Singleton FaissVetorStorage: {
                '‚úÖ PASSOU' if test1 else '‚ùå FALHOU'}")
        print(f"Integra√ß√£o ServiceHub: {'‚úÖ PASSOU' if test2 else '‚ùå FALHOU'}")
        print(f"M√∫ltiplos Processos: {'‚úÖ PASSOU' if test3 else '‚ùå FALHOU'}")

        if all([test1, test2, test3]):
            print("\nüéâ Todos os testes passaram!")
            print("O problema de concorr√™ncia foi resolvido!")
        else:
            print("\n‚ö†Ô∏è Alguns testes falharam. Verifique a implementa√ß√£o.")

    except Exception as e:
        print(f"‚ùå Erro durante os testes: {e}")
        import traceback
        traceback.print_exc()
