"""
Teste r√°pido para verificar a integra√ß√£o entre PydanticModel est√°tica e PydanticModelFactory din√¢mica
"""

from typing import Any, Dict

from smart_core_assistant_painel.modules.ai_engine.features.analise_previa_mensagem.datasource.langchain_pydantic.pydantic_model import (
    EntityItem, IntentItem, )
from smart_core_assistant_painel.modules.ai_engine.features.analise_previa_mensagem.datasource.langchain_pydantic.pydantic_model import (
    PydanticModel as StaticPydanticModel, )
from smart_core_assistant_painel.modules.ai_engine.features.analise_previa_mensagem.datasource.langchain_pydantic.pydantic_model_factory import (
    create_dynamic_pydantic_model, )


def test_integration() -> None:
    print("=== Teste de Integra√ß√£o ===\n")

    # Testar modelo est√°tico (fallback)
    print("1. Modelo Est√°tico (fallback):")
    static_model = StaticPydanticModel(
        intent=[IntentItem(type="saudacao", value="Ol√°")],
        entities=[EntityItem(type="cliente", value="Paulo")]
    )
    print(f"   ‚úÖ Inst√¢ncia criada: {type(static_model).__name__}")
    doc = static_model.__doc__ or ""
    print(f"   üìã Documenta√ß√£o: {doc[:100]}...")

    # Testar factory din√¢mica
    print("\n2. Factory Din√¢mica:")
    intent_json: Dict[str, Any] = {
        "intent_types": {
            "comunicacao_basica": {
                "saudacao": "cumprimentos e apresenta√ß√µes",
                "despedida": "finaliza√ß√µes de conversa"
            }
        }
    }

    entity_json: Dict[str, Any] = {
        "entity_types": {
            "identificacao_pessoal": {
                "cliente": "nome do cliente",
                "email": "endere√ßo de email"
            }
        }
    }

    DynamicModel = create_dynamic_pydantic_model(intent_json, entity_json)
    dynamic_instance = DynamicModel(
        intent=[{"type": "saudacao", "value": "Ol√°"}],
        entities=[{"type": "cliente", "value": "Paulo"}]
    )

    print(f"   ‚úÖ Modelo din√¢mico criado: {type(dynamic_instance).__name__}")
    dynamic_doc = DynamicModel.__doc__ or ""
    print(f"   üìã Documenta√ß√£o personalizada: {len(dynamic_doc)} caracteres")

    print("\nüéØ Integra√ß√£o funcionando perfeitamente!")
    print("   - Modelo est√°tico serve como fallback")
    print("   - Factory din√¢mica gera modelos personalizados")
    print("   - Ambos mant√™m compatibilidade total")


if __name__ == "__main__":
    test_integration()

if __name__ == "__main__":
    test_integration()
