#!/usr/bin/env python3
"""
Teste atualizado para verificar se os tipos de mensagem est√£o corretos
conforme a tabela da API.
"""

from enum import Enum


class TipoMensagem(str, Enum):
    """Simula√ß√£o da classe TipoMensagem atualizada para teste."""

    TEXTO_ESTENDIDO = 'extendedTextMessage'
    TEXTO_SIMPLES = 'conversation'
    IMAGEM = 'imageMessage'
    VIDEO = 'videoMessage'
    AUDIO = 'audioMessage'
    DOCUMENTO = 'documentMessage'
    STICKER = 'stickerMessage'
    LOCALIZACAO = 'locationMessage'
    CONTATO = 'contactMessage'
    LISTA = 'listMessage'
    BOTAO = 'buttonsMessage'
    ENQUETE = 'pollMessage'
    REACAO = 'reactMessage'
    STATUS = 'statusMessage'
    SISTEMA = 'sistema'

    @classmethod
    def obter_por_chave_json(cls, chave_json: str):
        """Retorna o tipo de mensagem baseado na chave JSON."""
        mapeamento = {
            'extendedTextMessage': cls.TEXTO_ESTENDIDO,
            'conversation': cls.TEXTO_SIMPLES,
            'imageMessage': cls.IMAGEM,
            'videoMessage': cls.VIDEO,
            'audioMessage': cls.AUDIO,
            'documentMessage': cls.DOCUMENTO,
            'stickerMessage': cls.STICKER,
            'locationMessage': cls.LOCALIZACAO,
            'contactMessage': cls.CONTATO,
            'listMessage': cls.LISTA,
            'buttonsMessage': cls.BOTAO,
            'pollMessage': cls.ENQUETE,
            'reactMessage': cls.REACAO,
            'statusMessage': cls.STATUS,
            'sistema': cls.SISTEMA,
        }
        return mapeamento.get(chave_json)

    @classmethod
    def obter_chave_json(cls, tipo_mensagem):
        """Retorna a chave JSON correspondente ao tipo de mensagem."""
        return tipo_mensagem.value if tipo_mensagem else None


def testar_conformidade_com_tabela():
    """Testa se todos os tipos da tabela est√£o implementados."""

    print("=== Teste de Conformidade com a Tabela da API ===\n")

    # Tipos esperados conforme a tabela
    tipos_esperados = [
        ('extendedTextMessage', 'TEXTO_ESTENDIDO', 'Mensagens de texto simples ou formatadas'),
        ('conversation', 'TEXTO_SIMPLES', 'Mensagens de texto sem formata√ß√£o'),
        ('imageMessage', 'IMAGEM', 'Envia imagem (PNG, JPG); aceita caption opcional'),
        ('videoMessage', 'VIDEO', 'Envia v√≠deo; aceita legenda'),
        ('audioMessage', 'AUDIO', 'Envia arquivo de √°udio (mp3, opus, etc.)'),
        ('documentMessage', 'DOCUMENTO', 'Envia qualquer tipo de arquivo (PDF, DOCX etc.)'),
        ('stickerMessage', 'STICKER', 'Envia stickers (WebP)'),
        ('locationMessage', 'LOCALIZACAO', 'Envia localiza√ß√£o geogr√°fica com lat/long'),
        ('contactMessage', 'CONTATO', 'Envia cart√£o de contato vCard'),
        ('listMessage', 'LISTA', 'Mensagem com sele√ß√£o de op√ß√µes em lista'),
        ('buttonsMessage', 'BOTAO', 'Mensagem com bot√µes clic√°veis'),
        ('pollMessage', 'ENQUETE', 'Envia enquete com alternativa de escolha'),
        ('reactMessage', 'REACAO', 'Envia rea√ß√£o (emoji) a uma mensagem existente'),
        ('statusMessage', 'STATUS', 'Envia conte√∫do ao status (modo story)'),
        ('sistema', 'SISTEMA', 'Mensagem do Sistema'),
    ]

    print("1. Verificando se todos os tipos da tabela est√£o implementados:")
    todos_corretos = True

    for chave_api, nome_enum, descricao in tipos_esperados:
        tipo = TipoMensagem.obter_por_chave_json(chave_api)

        if tipo:
            nome_real = tipo.name
            if nome_real == nome_enum:
                print(f"   ‚úÖ {chave_api} -> {nome_enum}")
            else:
                print(
                    f"   ‚ùå {chave_api} -> Esperado: {nome_enum}, Encontrado: {nome_real}")
                todos_corretos = False
        else:
            print(f"   ‚ùå {chave_api} -> Tipo n√£o encontrado")
            todos_corretos = False

    print()

    # Teste bidirecional
    print("2. Teste de correspond√™ncia bidirecional:")
    for chave_api, nome_enum, descricao in tipos_esperados:
        tipo = TipoMensagem.obter_por_chave_json(chave_api)
        if tipo:
            chave_retornada = TipoMensagem.obter_chave_json(tipo)
            if chave_retornada == chave_api:
                print(f"   ‚úÖ {nome_enum} <-> {chave_api}")
            else:
                print(
                    f"   ‚ùå {nome_enum} -> Esperado: {chave_api}, Retornado: {chave_retornada}")
                todos_corretos = False

    print()

    # Verificar se n√£o h√° tipos extras
    print("3. Verificando tipos implementados:")
    tipos_implementados = list(TipoMensagem)
    chaves_esperadas = {chave for chave, _, _ in tipos_esperados}

    for tipo in tipos_implementados:
        chave = tipo.value
        if chave in chaves_esperadas:
            print(f"   ‚úÖ {tipo.name} ({chave}) - Est√° na tabela")
        else:
            print(
                f"   ‚ö†Ô∏è  {
                    tipo.name} ({chave}) - N√£o est√° na tabela (pode ser extra)")

    print()

    if todos_corretos:
        print("üéâ Todos os tipos est√£o corretos e conformes com a tabela da API!")
    else:
        print("‚ùå H√° diverg√™ncias que precisam ser corrigidas.")

    return todos_corretos


def testar_casos_uso():
    """Testa casos de uso comuns."""

    print("=== Teste de Casos de Uso ===\n")

    # Caso 1: Mensagem de texto simples
    print("1. Processando mensagem de texto simples:")
    chave = 'conversation'
    tipo = TipoMensagem.obter_por_chave_json(chave)
    if tipo == TipoMensagem.TEXTO_SIMPLES:
        print(f"   ‚úÖ {chave} -> {tipo.name}")
    else:
        print(f"   ‚ùå {chave} -> {tipo}")

    # Caso 2: Mensagem de texto formatada
    print("2. Processando mensagem de texto formatada:")
    chave = 'extendedTextMessage'
    tipo = TipoMensagem.obter_por_chave_json(chave)
    if tipo == TipoMensagem.TEXTO_ESTENDIDO:
        print(f"   ‚úÖ {chave} -> {tipo.name}")
    else:
        print(f"   ‚ùå {chave} -> {tipo}")

    # Caso 3: Mensagem interativa
    print("3. Processando mensagem com bot√µes:")
    chave = 'buttonsMessage'
    tipo = TipoMensagem.obter_por_chave_json(chave)
    if tipo == TipoMensagem.BOTAO:
        print(f"   ‚úÖ {chave} -> {tipo.name}")
    else:
        print(f"   ‚ùå {chave} -> {tipo}")

    # Caso 4: Novo tipo - Status
    print("4. Processando mensagem de status:")
    chave = 'statusMessage'
    tipo = TipoMensagem.obter_por_chave_json(chave)
    if tipo == TipoMensagem.STATUS:
        print(f"   ‚úÖ {chave} -> {tipo.name}")
    else:
        print(f"   ‚ùå {chave} -> {tipo}")

    print()


if __name__ == "__main__":
    print("TESTE DE CONFORMIDADE DO TIPOMENSAGEM\n")
    print("=" * 50)

    resultado_conformidade = testar_conformidade_com_tabela()
    testar_casos_uso()

    print("=" * 50)
    if resultado_conformidade:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
