#!/usr/bin/env python3
"""
Teste final para verificar se os tipos de mensagem est√£o corretos
conforme a tabela final da API.
"""

from enum import Enum


class TipoMensagem(str, Enum):
    """Simula√ß√£o da classe TipoMensagem corrigida para teste."""

    TEXTO_FORMATADO = 'extendedTextMessage'
    IMAGEM = 'imageMessage'
    VIDEO = 'videoMessage'
    AUDIO = 'audioMessage'
    DOCUMENTO = 'documentMessage'
    STICKER = 'stickerMessage'
    LOCALIZACAO = 'locationMessage'
    CONTATO = 'contactMessage'
    LISTA = 'listMessage'
    BOTOES = 'buttonsMessage'
    ENQUETE = 'pollMessage'
    REACAO = 'reactMessage'

    @classmethod
    def obter_por_chave_json(cls, chave_json: str):
        """Retorna o tipo de mensagem baseado na chave JSON."""
        mapeamento = {
            'extendedTextMessage': cls.TEXTO_FORMATADO,
            'imageMessage': cls.IMAGEM,
            'videoMessage': cls.VIDEO,
            'audioMessage': cls.AUDIO,
            'documentMessage': cls.DOCUMENTO,
            'stickerMessage': cls.STICKER,
            'locationMessage': cls.LOCALIZACAO,
            'contactMessage': cls.CONTATO,
            'listMessage': cls.LISTA,
            'buttonsMessage': cls.BOTOES,
            'pollMessage': cls.ENQUETE,
            'reactMessage': cls.REACAO,
        }
        return mapeamento.get(chave_json)

    @classmethod
    def obter_chave_json(cls, tipo_mensagem):
        """Retorna a chave JSON correspondente ao tipo de mensagem."""
        return tipo_mensagem.value if tipo_mensagem else None


def testar_tabela_final():
    """Testa se todos os tipos da tabela final est√£o implementados."""

    print("=== Teste da Tabela Final (Corrigida) ===\n")

    # Tipos esperados conforme a tabela final
    tipos_esperados = [
        ('extendedTextMessage', 'TEXTO_FORMATADO', 'Texto com formata√ß√£o, cita√ß√µes, fontes, etc.'),
        ('imageMessage', 'IMAGEM', 'Imagem recebida, JPG/PNG, com caption poss√≠vel'),
        ('videoMessage', 'VIDEO', 'V√≠deo recebido, com legenda poss√≠vel'),
        ('audioMessage', 'AUDIO', '√Åudio recebido (.mp4, .mp3), com dura√ß√£o/ptt'),
        ('documentMessage', 'DOCUMENTO', 'Arquivo gen√©rico (PDF, DOCX etc.)'),
        ('stickerMessage', 'STICKER', 'Sticker no formato WebP'),
        ('locationMessage', 'LOCALIZACAO', 'Coordinates de localiza√ß√£o (lat/long)'),
        ('contactMessage', 'CONTATO', 'vCard com dados de contato'),
        ('listMessage', 'LISTA', 'Mensagem interativa com op√ß√µes em lista'),
        ('buttonsMessage', 'BOTOES', 'Bot√µes clic√°veis dentro da mensagem'),
        ('pollMessage', 'ENQUETE', 'Op√ß√µes de enquete dentro da mensagem'),
        ('reactMessage', 'REACAO', 'Rea√ß√£o (emoji) a uma mensagem existente'),
    ]

    print("1. Verificando se todos os tipos da tabela est√£o implementados:")
    todos_corretos = True

    for chave_api, nome_enum, descricao in tipos_esperados:
        tipo = TipoMensagem.obter_por_chave_json(chave_api)

        if tipo:
            nome_real = tipo.name
            if nome_real == nome_enum:
                print(f"   ‚úÖ {chave_api} -> {nome_enum}")
            else:
                print(
                    f"   ‚ùå {chave_api} -> Esperado: {nome_enum}, Encontrado: {nome_real}")
                todos_corretos = False
        else:
            print(f"   ‚ùå {chave_api} -> Tipo n√£o encontrado")
            todos_corretos = False

    print()

    # Verificar se n√£o h√° tipos extras
    print("2. Verificando tipos implementados:")
    tipos_implementados = list(TipoMensagem)
    chaves_esperadas = {chave for chave, _, _ in tipos_esperados}

    for tipo in tipos_implementados:
        chave = tipo.value
        if chave in chaves_esperadas:
            print(f"   ‚úÖ {tipo.name} ({chave}) - Est√° na tabela")
        else:
            print(
                f"   ‚ùå {
                    tipo.name} ({chave}) - N√ÉO est√° na tabela (deve ser removido)")
            todos_corretos = False

    print()

    # Verificar se n√£o faltam tipos
    print("3. Verificando se algum tipo da tabela est√° faltando:")
    tipos_implementados_chaves = {tipo.value for tipo in tipos_implementados}

    for chave_api, nome_enum, descricao in tipos_esperados:
        if chave_api not in tipos_implementados_chaves:
            print(f"   ‚ùå FALTANDO: {chave_api} -> {nome_enum}")
            todos_corretos = False
        else:
            print(f"   ‚úÖ {chave_api} -> {nome_enum}")

    print()

    if todos_corretos:
        print("üéâ Perfeito! A classe est√° 100% conforme a tabela final!")
        print(
            f"üìä Total de tipos: {
                len(tipos_esperados)} (conforme especificado)")
    else:
        print("‚ùå Ainda h√° diverg√™ncias que precisam ser corrigidas.")

    return todos_corretos


def testar_tipos_removidos():
    """Verifica se os tipos que deveriam ser removidos realmente foram removidos."""

    print("=== Verifica√ß√£o de Tipos Removidos ===\n")

    tipos_removidos = [
        'conversation',      # TEXTO_SIMPLES
        'statusMessage',     # STATUS
        'sistema'           # SISTEMA
    ]

    print("Verificando se tipos n√£o especificados foram removidos:")

    for chave in tipos_removidos:
        tipo = TipoMensagem.obter_por_chave_json(chave)
        if tipo is None:
            print(f"   ‚úÖ {chave} -> Corretamente removido")
        else:
            print(f"   ‚ùå {chave} -> Ainda existe: {tipo}")

    print()


if __name__ == "__main__":
    print("TESTE FINAL - CONFORMIDADE COM TABELA CORRIGIDA\n")
    print("=" * 60)

    resultado = testar_tabela_final()
    testar_tipos_removidos()

    print("=" * 60)
    if resultado:
        print("‚úÖ TODOS OS TESTES PASSARAM! A classe est√° correta.")
    else:
        print("‚ùå AINDA H√Å PROBLEMAS PARA CORRIGIR!")

    print("\nüìã Resumo da tabela final:")
    print("   - 12 tipos de mensagem (conforme especificado)")
    print("   - Removidos: TEXTO_SIMPLES, STATUS, SISTEMA")
    print("   - Apenas tipos oficiais da API Evolution")
